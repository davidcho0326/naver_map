{"ast":null,"code":"var _jsxFileName = \"C:\\\\python\\\\venv\\\\naver-map-chat\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchChat from './components/SearchChat';\nimport NaverMap from './components/NaverMap';\n\n// 백엔드 서버 URL 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = 'http://localhost:5000';\nfunction App() {\n  _s();\n  const [searchResult, setSearchResult] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [backendStatus, setBackendStatus] = useState('unknown');\n\n  // 백엔드 서버 상태 확인\n  useEffect(() => {\n    const checkBackendStatus = async () => {\n      try {\n        console.log('백엔드 서버 상태 확인 중...');\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 3000); // 3초 타임아웃\n\n        const response = await fetch(`${BACKEND_URL}/health`, {\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (response.ok) {\n          setBackendStatus('online');\n          console.log('백엔드 서버 연결 성공');\n        } else {\n          setBackendStatus('error');\n          console.error('백엔드 서버 응답 오류:', await response.text());\n        }\n      } catch (error) {\n        console.error('백엔드 서버 연결 실패:', error);\n        if (error.name === 'AbortError') {\n          console.error('백엔드 서버 연결 시간 초과');\n          setBackendStatus('timeout');\n        } else {\n          setBackendStatus('offline');\n        }\n      }\n    };\n    checkBackendStatus();\n\n    // 주기적으로 서버 상태 확인 (30초마다)\n    const intervalId = setInterval(checkBackendStatus, 30000);\n    return () => clearInterval(intervalId);\n  }, []);\n  const handleSearch = async query => {\n    try {\n      // 검색어를 메시지 목록에 추가\n      setMessages(prev => [...prev, {\n        type: 'user',\n        text: query\n      }]);\n      setIsLoading(true);\n\n      // 검색 시작 메시지 추가\n      setMessages(prev => [...prev, {\n        type: 'system',\n        text: `'${query}'를 검색 중입니다...`\n      }]);\n\n      // 백엔드에 검색 요청\n      console.log(`검색 요청: ${query}`);\n      const apiUrl = `${BACKEND_URL}/api/search?query=${encodeURIComponent(query)}`;\n      console.log(`API URL: ${apiUrl}`);\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5초 타임아웃\n\n      const response = await fetch(apiUrl, {\n        signal: controller.signal,\n        headers: {\n          'Accept': 'application/json',\n          'Cache-Control': 'no-cache'\n        }\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw new Error(`서버 응답 오류: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('검색 결과:', data);\n\n      // 이전 \"검색 중\" 메시지 제거\n      setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`));\n      if (data.error) {\n        throw new Error(data.error);\n      }\n      if (data.addresses && data.addresses.length > 0) {\n        const result = data.addresses[0];\n        setSearchResult({\n          x: parseFloat(result.x),\n          y: parseFloat(result.y),\n          address: result.roadAddress || result.jibunAddress,\n          query: query\n        });\n\n        // 검색 결과를 메시지로 추가\n        setMessages(prev => [...prev, {\n          type: 'system',\n          text: `'${query}'에 대한 검색 결과: ${result.roadAddress || result.jibunAddress}`\n        }]);\n      } else {\n        // 검색 결과가 없는 경우\n        setMessages(prev => [...prev, {\n          type: 'system',\n          text: `'${query}'에 대한 검색 결과가 없습니다.`\n        }]);\n      }\n    } catch (error) {\n      console.error('검색 오류:', error);\n\n      // \"검색 중\" 메시지 제거\n      setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`));\n\n      // 오류 메시지 추가\n      let errorMessage = error.message;\n      if (error.name === 'AbortError') {\n        errorMessage = '검색 요청 시간이 초과되었습니다. 백엔드 서버 상태를 확인해주세요.';\n        setBackendStatus('timeout');\n      }\n      setMessages(prev => [...prev, {\n        type: 'system',\n        text: `검색 중 오류가 발생했습니다: ${errorMessage}`\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 백엔드 상태에 따른 메시지 렌더링\n  const getBackendStatusMessage = () => {\n    switch (backendStatus) {\n      case 'offline':\n        return '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.';\n      case 'timeout':\n        return '백엔드 서버 응답 시간이 초과되었습니다. 서버가 과부하 상태일 수 있습니다.';\n      case 'error':\n        return '백엔드 서버 연결 오류가 발생했습니다. 서버 로그를 확인하세요.';\n      default:\n        return '백엔드 서버 연결 상태를 확인할 수 없습니다.';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [backendStatus !== 'online' && backendStatus !== 'unknown' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backend-status-warning\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getBackendStatusMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(NaverMap, {\n          searchResult: searchResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: /*#__PURE__*/_jsxDEV(SearchChat, {\n          onSearch: handleSearch,\n          messages: messages,\n          isLoading: isLoading,\n          isBackendOnline: backendStatus === 'online'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KLMzK9kQj+DOztIknORL2LzNe0U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchChat","NaverMap","jsxDEV","_jsxDEV","BACKEND_URL","App","_s","searchResult","setSearchResult","messages","setMessages","isLoading","setIsLoading","backendStatus","setBackendStatus","checkBackendStatus","console","log","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","error","text","name","intervalId","setInterval","clearInterval","handleSearch","query","prev","type","apiUrl","encodeURIComponent","headers","Error","status","statusText","data","json","filter","msg","addresses","length","result","x","parseFloat","y","address","roadAddress","jibunAddress","errorMessage","message","getBackendStatusMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","isBackendOnline","_c","$RefreshReg$"],"sources":["C:/python/venv/naver-map-chat/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport SearchChat from './components/SearchChat';\r\nimport NaverMap from './components/NaverMap';\r\n\r\n// 백엔드 서버 URL 설정\r\nconst BACKEND_URL = 'http://localhost:5000';\r\n\r\nfunction App() {\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [backendStatus, setBackendStatus] = useState('unknown');\r\n\r\n  // 백엔드 서버 상태 확인\r\n  useEffect(() => {\r\n    const checkBackendStatus = async () => {\r\n      try {\r\n        console.log('백엔드 서버 상태 확인 중...');\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), 3000); // 3초 타임아웃\r\n\r\n        const response = await fetch(`${BACKEND_URL}/health`, { \r\n          signal: controller.signal \r\n        });\r\n        \r\n        clearTimeout(timeoutId);\r\n        \r\n        if (response.ok) {\r\n          setBackendStatus('online');\r\n          console.log('백엔드 서버 연결 성공');\r\n        } else {\r\n          setBackendStatus('error');\r\n          console.error('백엔드 서버 응답 오류:', await response.text());\r\n        }\r\n      } catch (error) {\r\n        console.error('백엔드 서버 연결 실패:', error);\r\n        if (error.name === 'AbortError') {\r\n          console.error('백엔드 서버 연결 시간 초과');\r\n          setBackendStatus('timeout');\r\n        } else {\r\n          setBackendStatus('offline');\r\n        }\r\n      }\r\n    };\r\n\r\n    checkBackendStatus();\r\n\r\n    // 주기적으로 서버 상태 확인 (30초마다)\r\n    const intervalId = setInterval(checkBackendStatus, 30000);\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const handleSearch = async (query) => {\r\n    try {\r\n      // 검색어를 메시지 목록에 추가\r\n      setMessages(prev => [...prev, { type: 'user', text: query }]);\r\n      setIsLoading(true);\r\n\r\n      // 검색 시작 메시지 추가\r\n      setMessages(prev => [...prev, { \r\n        type: 'system', \r\n        text: `'${query}'를 검색 중입니다...` \r\n      }]);\r\n\r\n      // 백엔드에 검색 요청\r\n      console.log(`검색 요청: ${query}`);\r\n      const apiUrl = `${BACKEND_URL}/api/search?query=${encodeURIComponent(query)}`;\r\n      console.log(`API URL: ${apiUrl}`);\r\n      \r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5초 타임아웃\r\n      \r\n      const response = await fetch(apiUrl, {\r\n        signal: controller.signal,\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Cache-Control': 'no-cache'\r\n        }\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`서버 응답 오류: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('검색 결과:', data);\r\n      \r\n      // 이전 \"검색 중\" 메시지 제거\r\n      setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`));\r\n      \r\n      if (data.error) {\r\n        throw new Error(data.error);\r\n      }\r\n      \r\n      if (data.addresses && data.addresses.length > 0) {\r\n        const result = data.addresses[0];\r\n        setSearchResult({\r\n          x: parseFloat(result.x),\r\n          y: parseFloat(result.y),\r\n          address: result.roadAddress || result.jibunAddress,\r\n          query: query\r\n        });\r\n        \r\n        // 검색 결과를 메시지로 추가\r\n        setMessages(prev => [...prev, { \r\n          type: 'system', \r\n          text: `'${query}'에 대한 검색 결과: ${result.roadAddress || result.jibunAddress}` \r\n        }]);\r\n      } else {\r\n        // 검색 결과가 없는 경우\r\n        setMessages(prev => [...prev, { \r\n          type: 'system', \r\n          text: `'${query}'에 대한 검색 결과가 없습니다.` \r\n        }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('검색 오류:', error);\r\n      \r\n      // \"검색 중\" 메시지 제거\r\n      setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`));\r\n      \r\n      // 오류 메시지 추가\r\n      let errorMessage = error.message;\r\n      if (error.name === 'AbortError') {\r\n        errorMessage = '검색 요청 시간이 초과되었습니다. 백엔드 서버 상태를 확인해주세요.';\r\n        setBackendStatus('timeout');\r\n      }\r\n      \r\n      setMessages(prev => [...prev, { \r\n        type: 'system', \r\n        text: `검색 중 오류가 발생했습니다: ${errorMessage}` \r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 백엔드 상태에 따른 메시지 렌더링\r\n  const getBackendStatusMessage = () => {\r\n    switch(backendStatus) {\r\n      case 'offline':\r\n        return '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.';\r\n      case 'timeout':\r\n        return '백엔드 서버 응답 시간이 초과되었습니다. 서버가 과부하 상태일 수 있습니다.';\r\n      case 'error':\r\n        return '백엔드 서버 연결 오류가 발생했습니다. 서버 로그를 확인하세요.';\r\n      default:\r\n        return '백엔드 서버 연결 상태를 확인할 수 없습니다.';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {(backendStatus !== 'online' && backendStatus !== 'unknown') && (\r\n        <div className=\"backend-status-warning\">\r\n          <p>{getBackendStatusMessage()}</p>\r\n        </div>\r\n      )}\r\n      <div className=\"app-container\">\r\n        <div className=\"map-container\">\r\n          <NaverMap searchResult={searchResult} />\r\n        </div>\r\n        <div className=\"chat-container\">\r\n          <SearchChat \r\n            onSearch={handleSearch} \r\n            messages={messages} \r\n            isLoading={isLoading}\r\n            isBackendOnline={backendStatus === 'online'}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}