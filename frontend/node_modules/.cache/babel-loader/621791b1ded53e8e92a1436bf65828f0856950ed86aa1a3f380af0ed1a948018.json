{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haenee\\\\Desktop\\\\naver-map-chat\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchChat from './components/SearchChat';\nimport NaverMap from './components/NaverMap';\n\n// 백엔드 서버 URL 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = 'http://localhost:5000';\nfunction App() {\n  _s();\n  const [searchResult, setSearchResult] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [backendStatus, setBackendStatus] = useState('unknown');\n  // F&F 신사옥 좌표로 초기 위치 설정\n  const [userLocation, setUserLocation] = useState({\n    lat: 37.4982314,\n    lng: 127.0379665\n  });\n\n  // 백엔드 서버 상태 확인\n  useEffect(() => {\n    const checkBackendStatus = async () => {\n      try {\n        console.log('백엔드 서버 상태 확인 중...');\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 3000);\n        const response = await fetch(`${BACKEND_URL}/health`, {\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (response.ok) {\n          setBackendStatus('online');\n          console.log('백엔드 서버 연결 성공');\n        } else {\n          setBackendStatus('error');\n          console.error('백엔드 서버 응답 오류:', await response.text());\n        }\n      } catch (error) {\n        console.error('백엔드 서버 연결 실패:', error);\n        if (error.name === 'AbortError') {\n          console.error('백엔드 서버 연결 시간 초과');\n          setBackendStatus('timeout');\n        } else {\n          setBackendStatus('offline');\n        }\n      }\n    };\n    checkBackendStatus();\n    const intervalId = setInterval(checkBackendStatus, 30000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // 백엔드 서버 상태에 따른 UI 처리\n  useEffect(() => {\n    if (backendStatus === 'timeout' || backendStatus === 'error') {\n      // 상태 메시지를 UI의 상태 표시줄에만 표시하고, 채팅 메시지로는 추가하지 않음\n      console.error('서버 상태 오류:', backendStatus);\n    }\n  }, [backendStatus]);\n\n  // 사용자 위치 정보 처리 - 실제 위치 대신 F&F 신사옥 위치 사용\n  useEffect(() => {\n    setUserLocation({\n      lat: 37.4982517,\n      lng: 127.0310195\n    });\n  }, []);\n\n  // 위치 기반 검색 함수\n  const handleSearch = async query => {\n    setIsLoading(true);\n    setMessages(prev => [...prev, {\n      type: 'user',\n      content: query\n    }]);\n    try {\n      const response = await fetch('http://localhost:5000/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query,\n          location: userLocation\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        let errorMessage = '검색 중 오류가 발생했습니다.';\n        if (response.status === 404) {\n          errorMessage = '검색 결과를 찾을 수 없습니다.';\n        } else if (errorData.error) {\n          errorMessage = errorData.error;\n        }\n        setMessages(prev => [...prev, {\n          type: 'error',\n          content: errorMessage\n        }]);\n        setIsLoading(false);\n        return;\n      }\n      const data = await response.json();\n      setSearchResult(data);\n      if (data.response) {\n        setMessages(prev => [...prev, {\n          type: 'bot',\n          content: data.response\n        }]);\n      } else {\n        setMessages(prev => [...prev, {\n          type: 'bot',\n          content: '검색 결과가 없습니다.'\n        }]);\n      }\n    } catch (error) {\n      console.error('Search error:', error);\n      setMessages(prev => [...prev, {\n        type: 'error',\n        content: '서버와 통신 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 백엔드 상태에 따른 메시지 렌더링\n  const getBackendStatusMessage = () => {\n    switch (backendStatus) {\n      case 'offline':\n        return '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.';\n      case 'timeout':\n        return '백엔드 서버 응답 시간이 초과되었습니다. 서버가 과부하 상태일 수 있습니다.';\n      case 'error':\n        return '백엔드 서버 연결 오류가 발생했습니다. 서버 로그를 확인하세요.';\n      default:\n        return '백엔드 서버 연결 상태를 확인할 수 없습니다.';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [backendStatus !== 'online' && backendStatus !== 'unknown' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backend-status-warning\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getBackendStatusMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), userLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-status\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD604\\uC7AC \\uC704\\uCE58 \\uC815\\uBCF4 \\uC0AC\\uC6A9 \\uC911\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(NaverMap, {\n          searchResult: searchResult,\n          userLocation: userLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: /*#__PURE__*/_jsxDEV(SearchChat, {\n          onSearch: handleSearch,\n          messages: messages,\n          isLoading: isLoading,\n          isBackendOnline: backendStatus === 'online',\n          hasLocation: !!userLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OH3xDG+wDEqxgdzjCBe1hMpx5hk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchChat","NaverMap","jsxDEV","_jsxDEV","BACKEND_URL","App","_s","searchResult","setSearchResult","messages","setMessages","isLoading","setIsLoading","backendStatus","setBackendStatus","userLocation","setUserLocation","lat","lng","checkBackendStatus","console","log","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","error","text","name","intervalId","setInterval","clearInterval","handleSearch","query","prev","type","content","method","headers","body","JSON","stringify","location","errorData","json","errorMessage","status","data","getBackendStatusMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","isBackendOnline","hasLocation","_c","$RefreshReg$"],"sources":["C:/Users/haenee/Desktop/naver-map-chat/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport SearchChat from './components/SearchChat';\r\nimport NaverMap from './components/NaverMap';\r\n\r\n// 백엔드 서버 URL 설정\r\nconst BACKEND_URL = 'http://localhost:5000';\r\n\r\nfunction App() {\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [backendStatus, setBackendStatus] = useState('unknown');\r\n  // F&F 신사옥 좌표로 초기 위치 설정\r\n  const [userLocation, setUserLocation] = useState({\r\n    lat: 37.4982314,\r\n    lng: 127.0379665\r\n  });\r\n\r\n  // 백엔드 서버 상태 확인\r\n  useEffect(() => {\r\n    const checkBackendStatus = async () => {\r\n      try {\r\n        console.log('백엔드 서버 상태 확인 중...');\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), 3000);\r\n\r\n        const response = await fetch(`${BACKEND_URL}/health`, { \r\n          signal: controller.signal \r\n        });\r\n\r\n        clearTimeout(timeoutId);\r\n\r\n        if (response.ok) {\r\n          setBackendStatus('online');\r\n          console.log('백엔드 서버 연결 성공');\r\n        } else {\r\n          setBackendStatus('error');\r\n          console.error('백엔드 서버 응답 오류:', await response.text());\r\n        }\r\n      } catch (error) {\r\n        console.error('백엔드 서버 연결 실패:', error);\r\n        if (error.name === 'AbortError') {\r\n          console.error('백엔드 서버 연결 시간 초과');\r\n          setBackendStatus('timeout');\r\n        } else {\r\n          setBackendStatus('offline');\r\n        }\r\n      }\r\n    };\r\n\r\n    checkBackendStatus();\r\n    const intervalId = setInterval(checkBackendStatus, 30000);\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  // 백엔드 서버 상태에 따른 UI 처리\r\n  useEffect(() => {\r\n    if (backendStatus === 'timeout' || backendStatus === 'error') {\r\n      // 상태 메시지를 UI의 상태 표시줄에만 표시하고, 채팅 메시지로는 추가하지 않음\r\n      console.error('서버 상태 오류:', backendStatus);\r\n    }\r\n  }, [backendStatus]);\r\n\r\n  // 사용자 위치 정보 처리 - 실제 위치 대신 F&F 신사옥 위치 사용\r\n  useEffect(() => {\r\n    setUserLocation({\r\n      lat: 37.4982517,\r\n      lng: 127.0310195\r\n    });\r\n  }, []);\r\n\r\n  // 위치 기반 검색 함수\r\n  const handleSearch = async (query) => {\r\n    setIsLoading(true);\r\n    setMessages(prev => [...prev, { type: 'user', content: query }]);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/search', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ query, location: userLocation }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        let errorMessage = '검색 중 오류가 발생했습니다.';\r\n        \r\n        if (response.status === 404) {\r\n          errorMessage = '검색 결과를 찾을 수 없습니다.';\r\n        } else if (errorData.error) {\r\n          errorMessage = errorData.error;\r\n        }\r\n        \r\n        setMessages(prev => [...prev, { type: 'error', content: errorMessage }]);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      setSearchResult(data);\r\n      \r\n      if (data.response) {\r\n        setMessages(prev => [...prev, { type: 'bot', content: data.response }]);\r\n      } else {\r\n        setMessages(prev => [...prev, { type: 'bot', content: '검색 결과가 없습니다.' }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Search error:', error);\r\n      setMessages(prev => [...prev, { \r\n        type: 'error', \r\n        content: '서버와 통신 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.' \r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 백엔드 상태에 따른 메시지 렌더링\r\n  const getBackendStatusMessage = () => {\r\n    switch(backendStatus) {\r\n      case 'offline':\r\n        return '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.';\r\n      case 'timeout':\r\n        return '백엔드 서버 응답 시간이 초과되었습니다. 서버가 과부하 상태일 수 있습니다.';\r\n      case 'error':\r\n        return '백엔드 서버 연결 오류가 발생했습니다. 서버 로그를 확인하세요.';\r\n      default:\r\n        return '백엔드 서버 연결 상태를 확인할 수 없습니다.';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {(backendStatus !== 'online' && backendStatus !== 'unknown') && (\r\n        <div className=\"backend-status-warning\">\r\n          <p>{getBackendStatusMessage()}</p>\r\n        </div>\r\n      )}\r\n      {userLocation && (\r\n        <div className=\"location-status\">\r\n          <p>현재 위치 정보 사용 중</p>\r\n        </div>\r\n      )}\r\n      <div className=\"app-container\">\r\n        <div className=\"map-container\">\r\n          <NaverMap \r\n            searchResult={searchResult} \r\n            userLocation={userLocation}\r\n          />\r\n        </div>\r\n        <div className=\"chat-container\">\r\n          <SearchChat \r\n            onSearch={handleSearch}\r\n            messages={messages} \r\n            isLoading={isLoading}\r\n            isBackendOnline={backendStatus === 'online'}\r\n            hasLocation={!!userLocation}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}