{"ast":null,"code":"var _jsxFileName = \"C:\\\\python\\\\venv\\\\naver-map-chat\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchChat from './components/SearchChat';\nimport NaverMap from './components/NaverMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [searchResult, setSearchResult] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [backendStatus, setBackendStatus] = useState('unknown');\n\n  // 백엔드 서버 상태 확인\n  useEffect(() => {\n    const checkBackendStatus = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/health');\n        if (response.ok) {\n          setBackendStatus('online');\n          console.log('백엔드 서버 연결 성공');\n        } else {\n          setBackendStatus('error');\n          console.error('백엔드 서버 응답 오류:', await response.text());\n        }\n      } catch (error) {\n        setBackendStatus('offline');\n        console.error('백엔드 서버 연결 실패:', error);\n      }\n    };\n    checkBackendStatus();\n  }, []);\n  const handleSearch = async query => {\n    try {\n      // 검색어를 메시지 목록에 추가\n      setMessages(prev => [...prev, {\n        type: 'user',\n        text: query\n      }]);\n      setIsLoading(true);\n\n      // 검색 시작 메시지 추가\n      setMessages(prev => [...prev, {\n        type: 'system',\n        text: `'${query}'를 검색 중입니다...`\n      }]);\n\n      // 백엔드에 검색 요청\n      console.log(`검색 요청: ${query}`);\n      const apiUrl = `http://localhost:5000/api/search?query=${encodeURIComponent(query)}`;\n      console.log(`API URL: ${apiUrl}`);\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`서버 응답 오류: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('검색 결과:', data);\n\n      // 이전 \"검색 중\" 메시지 제거\n      setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`));\n      if (data.error) {\n        throw new Error(data.error);\n      }\n      if (data.addresses && data.addresses.length > 0) {\n        const result = data.addresses[0];\n        setSearchResult({\n          x: parseFloat(result.x),\n          y: parseFloat(result.y),\n          address: result.roadAddress || result.jibunAddress,\n          query: query\n        });\n\n        // 검색 결과를 메시지로 추가\n        setMessages(prev => [...prev, {\n          type: 'system',\n          text: `'${query}'에 대한 검색 결과: ${result.roadAddress || result.jibunAddress}`\n        }]);\n      } else {\n        // 검색 결과가 없는 경우\n        setMessages(prev => [...prev, {\n          type: 'system',\n          text: `'${query}'에 대한 검색 결과가 없습니다.`\n        }]);\n      }\n    } catch (error) {\n      console.error('검색 오류:', error);\n\n      // \"검색 중\" 메시지 제거\n      setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`));\n\n      // 오류 메시지 추가\n      setMessages(prev => [...prev, {\n        type: 'system',\n        text: `검색 중 오류가 발생했습니다: ${error.message}`\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [backendStatus === 'offline' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backend-status-warning\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uBC31\\uC5D4\\uB4DC \\uC11C\\uBC84\\uC5D0 \\uC5F0\\uACB0\\uD560 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uC11C\\uBC84\\uAC00 \\uC2E4\\uD589 \\uC911\\uC778\\uC9C0 \\uD655\\uC778\\uD558\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(NaverMap, {\n          searchResult: searchResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: /*#__PURE__*/_jsxDEV(SearchChat, {\n          onSearch: handleSearch,\n          messages: messages,\n          isLoading: isLoading,\n          isBackendOnline: backendStatus === 'online'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KLMzK9kQj+DOztIknORL2LzNe0U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchChat","NaverMap","jsxDEV","_jsxDEV","App","_s","searchResult","setSearchResult","messages","setMessages","isLoading","setIsLoading","backendStatus","setBackendStatus","checkBackendStatus","response","fetch","ok","console","log","error","text","handleSearch","query","prev","type","apiUrl","encodeURIComponent","Error","status","statusText","data","json","filter","msg","addresses","length","result","x","parseFloat","y","address","roadAddress","jibunAddress","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","isBackendOnline","_c","$RefreshReg$"],"sources":["C:/python/venv/naver-map-chat/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport SearchChat from './components/SearchChat';\r\nimport NaverMap from './components/NaverMap';\r\n\r\nfunction App() {\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [backendStatus, setBackendStatus] = useState('unknown');\r\n\r\n  // 백엔드 서버 상태 확인\r\n  useEffect(() => {\r\n    const checkBackendStatus = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/health');\r\n        if (response.ok) {\r\n          setBackendStatus('online');\r\n          console.log('백엔드 서버 연결 성공');\r\n        } else {\r\n          setBackendStatus('error');\r\n          console.error('백엔드 서버 응답 오류:', await response.text());\r\n        }\r\n      } catch (error) {\r\n        setBackendStatus('offline');\r\n        console.error('백엔드 서버 연결 실패:', error);\r\n      }\r\n    };\r\n\r\n    checkBackendStatus();\r\n  }, []);\r\n\r\n  const handleSearch = async (query) => {\r\n    try {\r\n      // 검색어를 메시지 목록에 추가\r\n      setMessages(prev => [...prev, { type: 'user', text: query }]);\r\n      setIsLoading(true);\r\n\r\n      // 검색 시작 메시지 추가\r\n      setMessages(prev => [...prev, { \r\n        type: 'system', \r\n        text: `'${query}'를 검색 중입니다...` \r\n      }]);\r\n\r\n      // 백엔드에 검색 요청\r\n      console.log(`검색 요청: ${query}`);\r\n      const apiUrl = `http://localhost:5000/api/search?query=${encodeURIComponent(query)}`;\r\n      console.log(`API URL: ${apiUrl}`);\r\n      \r\n      const response = await fetch(apiUrl);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`서버 응답 오류: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log('검색 결과:', data);\r\n      \r\n      // 이전 \"검색 중\" 메시지 제거\r\n      setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`));\r\n      \r\n      if (data.error) {\r\n        throw new Error(data.error);\r\n      }\r\n      \r\n      if (data.addresses && data.addresses.length > 0) {\r\n        const result = data.addresses[0];\r\n        setSearchResult({\r\n          x: parseFloat(result.x),\r\n          y: parseFloat(result.y),\r\n          address: result.roadAddress || result.jibunAddress,\r\n          query: query\r\n        });\r\n        \r\n        // 검색 결과를 메시지로 추가\r\n        setMessages(prev => [...prev, { \r\n          type: 'system', \r\n          text: `'${query}'에 대한 검색 결과: ${result.roadAddress || result.jibunAddress}` \r\n        }]);\r\n      } else {\r\n        // 검색 결과가 없는 경우\r\n        setMessages(prev => [...prev, { \r\n          type: 'system', \r\n          text: `'${query}'에 대한 검색 결과가 없습니다.` \r\n        }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('검색 오류:', error);\r\n      \r\n      // \"검색 중\" 메시지 제거\r\n      setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`));\r\n      \r\n      // 오류 메시지 추가\r\n      setMessages(prev => [...prev, { \r\n        type: 'system', \r\n        text: `검색 중 오류가 발생했습니다: ${error.message}` \r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {backendStatus === 'offline' && (\r\n        <div className=\"backend-status-warning\">\r\n          <p>백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.</p>\r\n        </div>\r\n      )}\r\n      <div className=\"app-container\">\r\n        <div className=\"map-container\">\r\n          <NaverMap searchResult={searchResult} />\r\n        </div>\r\n        <div className=\"chat-container\">\r\n          <SearchChat \r\n            onSearch={handleSearch} \r\n            messages={messages} \r\n            isLoading={isLoading}\r\n            isBackendOnline={backendStatus === 'online'}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}