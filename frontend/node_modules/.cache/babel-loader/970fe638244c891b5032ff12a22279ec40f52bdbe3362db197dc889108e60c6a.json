{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haenee\\\\Desktop\\\\naver-map-chat\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchChat from './components/SearchChat';\nimport NaverMap from './components/NaverMap';\n\n// 백엔드 서버 URL 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = 'http://localhost:5000';\nfunction App() {\n  _s();\n  const [searchResult, setSearchResult] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [backendStatus, setBackendStatus] = useState('unknown');\n  const [userLocation, setUserLocation] = useState(null);\n\n  // 백엔드 서버 상태 확인\n  useEffect(() => {\n    const checkBackendStatus = async () => {\n      try {\n        console.log('백엔드 서버 상태 확인 중...');\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 3000); // 3초 타임아웃\n\n        const response = await fetch(`${BACKEND_URL}/health`, {\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (response.ok) {\n          setBackendStatus('online');\n          console.log('백엔드 서버 연결 성공');\n        } else {\n          setBackendStatus('error');\n          console.error('백엔드 서버 응답 오류:', await response.text());\n        }\n      } catch (error) {\n        console.error('백엔드 서버 연결 실패:', error);\n        if (error.name === 'AbortError') {\n          console.error('백엔드 서버 연결 시간 초과');\n          setBackendStatus('timeout');\n        } else {\n          setBackendStatus('offline');\n        }\n      }\n    };\n    checkBackendStatus();\n\n    // 주기적으로 서버 상태 확인 (30초마다)\n    const intervalId = setInterval(checkBackendStatus, 30000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // 사용자 위치 가져오기\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        console.log('사용자 위치 정보 획득:', position.coords.latitude, position.coords.longitude);\n      }, error => {\n        console.error('위치 정보 획득 실패:', error);\n      });\n    } else {\n      console.warn('이 브라우저는 위치 정보를 지원하지 않습니다.');\n    }\n  }, []);\n\n  // 위치 기반 검색 함수\n  const handleSearch = async query => {\n    try {\n      setMessages(prev => [...prev, {\n        type: 'user',\n        text: query\n      }]);\n      setIsLoading(true);\n      setMessages(prev => [...prev, {\n        type: 'system',\n        text: `'${query}'를 검색 중입니다...`\n      }]);\n\n      // 검색 API 엔드포인트 결정\n      const endpoint = query.includes('맛집') || query.includes('음식점') || query.includes('식당') || query.includes('카페') || query.includes('병원') || query.includes('약국') ? '/search' : '/api/search';\n\n      // 위치 기반 검색 API 호출\n      const response = await fetch(`${BACKEND_URL}${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query,\n          location: userLocation // 위치 정보 포함\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`서버 응답 오류: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      // \"검색 중\" 메시지 제거\n      setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`));\n\n      // RAG 검색 결과 처리\n      if (endpoint === '/search') {\n        if (data.error) {\n          setMessages(prev => [...prev, {\n            type: 'system',\n            text: data.error\n          }]);\n        } else {\n          // RAG 응답 표시\n          if (data.response) {\n            setMessages(prev => [...prev, {\n              type: 'system',\n              text: data.response\n            }]);\n          }\n\n          // 장소 정보가 있으면 지도에 표시\n          if (data.places && data.places.length > 0) {\n            const places = data.places.map(place => ({\n              x: parseFloat(place.mapx),\n              y: parseFloat(place.mapy),\n              name: place.name,\n              address: place.address,\n              category: place.category,\n              distance: place.distance\n            }));\n            setSearchResult({\n              places,\n              userLocation: userLocation\n            });\n          }\n        }\n      } else {\n        // 기존 네이버 지도 API 검색 결과 처리\n        processSearchResults(data, query);\n      }\n    } catch (error) {\n      handleSearchError(error, query);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 검색 결과 처리 함수\n  const processSearchResults = (data, query) => {\n    if (data.addresses && data.addresses.length > 0) {\n      const result = data.addresses[0];\n      setSearchResult({\n        x: parseFloat(result.x),\n        y: parseFloat(result.y),\n        address: result.roadAddress || result.jibunAddress,\n        query: query,\n        additionalInfo: data.additional_info || null\n      });\n\n      // 기본 응답 메시지\n      let responseText = `'${query}'에 대한 검색 결과: ${result.roadAddress || result.jibunAddress}`;\n      setMessages(prev => [...prev, {\n        type: 'system',\n        text: responseText\n      }]);\n\n      // 추가 정보가 있으면 별도 메시지로 표시\n      if (data.additional_info) {\n        setMessages(prev => [...prev, {\n          type: 'system',\n          text: data.additional_info,\n          isContextInfo: true\n        }]);\n      }\n    } else if (data.error) {\n      setMessages(prev => [...prev, {\n        type: 'system',\n        text: data.error\n      }]);\n    } else {\n      setMessages(prev => [...prev, {\n        type: 'system',\n        text: `'${query}'에 대한 검색 결과가 없습니다.`\n      }]);\n    }\n  };\n\n  // 검색 오류 처리 함수\n  const handleSearchError = (error, query) => {\n    console.error('검색 오류:', error);\n    setMessages(prev => prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...` && msg.text !== `'${query}'에 대해 검색 중입니다...`));\n    setMessages(prev => [...prev, {\n      type: 'system',\n      text: `검색 중 오류가 발생했습니다: ${error.message}`\n    }]);\n  };\n\n  // 백엔드 상태에 따른 메시지 렌더링\n  const getBackendStatusMessage = () => {\n    switch (backendStatus) {\n      case 'offline':\n        return '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.';\n      case 'timeout':\n        return '백엔드 서버 응답 시간이 초과되었습니다. 서버가 과부하 상태일 수 있습니다.';\n      case 'error':\n        return '백엔드 서버 연결 오류가 발생했습니다. 서버 로그를 확인하세요.';\n      default:\n        return '백엔드 서버 연결 상태를 확인할 수 없습니다.';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [backendStatus !== 'online' && backendStatus !== 'unknown' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backend-status-warning\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getBackendStatusMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this), userLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-status\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD604\\uC7AC \\uC704\\uCE58 \\uC815\\uBCF4 \\uC0AC\\uC6A9 \\uC911\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(NaverMap, {\n          searchResult: searchResult,\n          userLocation: userLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: /*#__PURE__*/_jsxDEV(SearchChat, {\n          onSearch: handleSearch,\n          messages: messages,\n          isLoading: isLoading,\n          isBackendOnline: backendStatus === 'online',\n          hasLocation: !!userLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nY8y8jazP9/Ez6YX4t5H0mgXTgA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchChat","NaverMap","jsxDEV","_jsxDEV","BACKEND_URL","App","_s","searchResult","setSearchResult","messages","setMessages","isLoading","setIsLoading","backendStatus","setBackendStatus","userLocation","setUserLocation","checkBackendStatus","console","log","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","error","text","name","intervalId","setInterval","clearInterval","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","warn","handleSearch","query","prev","type","endpoint","includes","method","headers","body","JSON","stringify","location","Error","status","statusText","data","json","filter","msg","places","length","map","place","x","parseFloat","mapx","y","mapy","address","category","distance","processSearchResults","handleSearchError","addresses","result","roadAddress","jibunAddress","additionalInfo","additional_info","responseText","isContextInfo","message","getBackendStatusMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","isBackendOnline","hasLocation","_c","$RefreshReg$"],"sources":["C:/Users/haenee/Desktop/naver-map-chat/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport SearchChat from './components/SearchChat';\r\nimport NaverMap from './components/NaverMap';\r\n\r\n// 백엔드 서버 URL 설정\r\nconst BACKEND_URL = 'http://localhost:5000';\r\n\r\nfunction App() {\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [backendStatus, setBackendStatus] = useState('unknown');\r\n  const [userLocation, setUserLocation] = useState(null);\r\n\r\n  // 백엔드 서버 상태 확인\r\n  useEffect(() => {\r\n    const checkBackendStatus = async () => {\r\n      try {\r\n        console.log('백엔드 서버 상태 확인 중...');\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), 3000); // 3초 타임아웃\r\n\r\n        const response = await fetch(`${BACKEND_URL}/health`, { \r\n          signal: controller.signal \r\n        });\r\n        \r\n        clearTimeout(timeoutId);\r\n        \r\n        if (response.ok) {\r\n          setBackendStatus('online');\r\n          console.log('백엔드 서버 연결 성공');\r\n        } else {\r\n          setBackendStatus('error');\r\n          console.error('백엔드 서버 응답 오류:', await response.text());\r\n        }\r\n      } catch (error) {\r\n        console.error('백엔드 서버 연결 실패:', error);\r\n        if (error.name === 'AbortError') {\r\n          console.error('백엔드 서버 연결 시간 초과');\r\n          setBackendStatus('timeout');\r\n        } else {\r\n          setBackendStatus('offline');\r\n        }\r\n      }\r\n    };\r\n\r\n    checkBackendStatus();\r\n\r\n    // 주기적으로 서버 상태 확인 (30초마다)\r\n    const intervalId = setInterval(checkBackendStatus, 30000);\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  // 사용자 위치 가져오기\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setUserLocation({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude\r\n          });\r\n          console.log('사용자 위치 정보 획득:', position.coords.latitude, position.coords.longitude);\r\n        },\r\n        (error) => {\r\n          console.error('위치 정보 획득 실패:', error);\r\n        }\r\n      );\r\n    } else {\r\n      console.warn('이 브라우저는 위치 정보를 지원하지 않습니다.');\r\n    }\r\n  }, []);\r\n\r\n  // 위치 기반 검색 함수\r\n  const handleSearch = async (query) => {\r\n    try {\r\n      setMessages(prev => [...prev, { type: 'user', text: query }]);\r\n      setIsLoading(true);\r\n\r\n      setMessages(prev => [...prev, { \r\n        type: 'system', \r\n        text: `'${query}'를 검색 중입니다...` \r\n      }]);\r\n\r\n      // 검색 API 엔드포인트 결정\r\n      const endpoint = query.includes('맛집') || query.includes('음식점') || query.includes('식당') || \r\n                      query.includes('카페') || query.includes('병원') || query.includes('약국') ? \r\n                      '/search' : '/api/search';\r\n\r\n      // 위치 기반 검색 API 호출\r\n      const response = await fetch(`${BACKEND_URL}${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ \r\n          query,\r\n          location: userLocation // 위치 정보 포함\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`서버 응답 오류: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      // \"검색 중\" 메시지 제거\r\n      setMessages(prev => \r\n        prev.filter(msg => msg.text !== `'${query}'를 검색 중입니다...`)\r\n      );\r\n      \r\n      // RAG 검색 결과 처리\r\n      if (endpoint === '/search') {\r\n        if (data.error) {\r\n          setMessages(prev => [...prev, { \r\n            type: 'system', \r\n            text: data.error\r\n          }]);\r\n        } else {\r\n          // RAG 응답 표시\r\n          if (data.response) {\r\n            setMessages(prev => [...prev, { \r\n              type: 'system', \r\n              text: data.response\r\n            }]);\r\n          }\r\n          \r\n          // 장소 정보가 있으면 지도에 표시\r\n          if (data.places && data.places.length > 0) {\r\n            const places = data.places.map(place => ({\r\n              x: parseFloat(place.mapx),\r\n              y: parseFloat(place.mapy),\r\n              name: place.name,\r\n              address: place.address,\r\n              category: place.category,\r\n              distance: place.distance\r\n            }));\r\n            \r\n            setSearchResult({\r\n              places,\r\n              userLocation: userLocation\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        // 기존 네이버 지도 API 검색 결과 처리\r\n        processSearchResults(data, query);\r\n      }\r\n    } catch (error) {\r\n      handleSearchError(error, query);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 검색 결과 처리 함수\r\n  const processSearchResults = (data, query) => {\r\n    if (data.addresses && data.addresses.length > 0) {\r\n      const result = data.addresses[0];\r\n      \r\n      setSearchResult({\r\n        x: parseFloat(result.x),\r\n        y: parseFloat(result.y),\r\n        address: result.roadAddress || result.jibunAddress,\r\n        query: query,\r\n        additionalInfo: data.additional_info || null\r\n      });\r\n      \r\n      // 기본 응답 메시지\r\n      let responseText = `'${query}'에 대한 검색 결과: ${result.roadAddress || result.jibunAddress}`;\r\n      \r\n      setMessages(prev => [...prev, { \r\n        type: 'system', \r\n        text: responseText \r\n      }]);\r\n      \r\n      // 추가 정보가 있으면 별도 메시지로 표시\r\n      if (data.additional_info) {\r\n        setMessages(prev => [...prev, { \r\n          type: 'system', \r\n          text: data.additional_info,\r\n          isContextInfo: true\r\n        }]);\r\n      }\r\n    } else if (data.error) {\r\n      setMessages(prev => [...prev, { \r\n        type: 'system', \r\n        text: data.error\r\n      }]);\r\n    } else {\r\n      setMessages(prev => [...prev, { \r\n        type: 'system', \r\n        text: `'${query}'에 대한 검색 결과가 없습니다.` \r\n      }]);\r\n    }\r\n  };\r\n\r\n  // 검색 오류 처리 함수\r\n  const handleSearchError = (error, query) => {\r\n    console.error('검색 오류:', error);\r\n    \r\n    setMessages(prev => \r\n      prev.filter(msg => \r\n        msg.text !== `'${query}'를 검색 중입니다...` && \r\n        msg.text !== `'${query}'에 대해 검색 중입니다...`\r\n      )\r\n    );\r\n    \r\n    setMessages(prev => [...prev, { \r\n      type: 'system', \r\n      text: `검색 중 오류가 발생했습니다: ${error.message}` \r\n    }]);\r\n  };\r\n\r\n  // 백엔드 상태에 따른 메시지 렌더링\r\n  const getBackendStatusMessage = () => {\r\n    switch(backendStatus) {\r\n      case 'offline':\r\n        return '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.';\r\n      case 'timeout':\r\n        return '백엔드 서버 응답 시간이 초과되었습니다. 서버가 과부하 상태일 수 있습니다.';\r\n      case 'error':\r\n        return '백엔드 서버 연결 오류가 발생했습니다. 서버 로그를 확인하세요.';\r\n      default:\r\n        return '백엔드 서버 연결 상태를 확인할 수 없습니다.';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {(backendStatus !== 'online' && backendStatus !== 'unknown') && (\r\n        <div className=\"backend-status-warning\">\r\n          <p>{getBackendStatusMessage()}</p>\r\n        </div>\r\n      )}\r\n      {userLocation && (\r\n        <div className=\"location-status\">\r\n          <p>현재 위치 정보 사용 중</p>\r\n        </div>\r\n      )}\r\n      <div className=\"app-container\">\r\n        <div className=\"map-container\">\r\n          <NaverMap \r\n            searchResult={searchResult} \r\n            userLocation={userLocation}\r\n          />\r\n        </div>\r\n        <div className=\"chat-container\">\r\n          <SearchChat \r\n            onSearch={handleSearch}\r\n            messages={messages} \r\n            isLoading={isLoading}\r\n            isBackendOnline={backendStatus === 'online'}\r\n            hasLocation={!!userLocation}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}