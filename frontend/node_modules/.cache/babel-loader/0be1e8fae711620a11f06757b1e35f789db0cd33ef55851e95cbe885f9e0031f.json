{"ast":null,"code":"var _jsxFileName = \"C:\\\\python\\\\venv\\\\naver-map-chat\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport SearchChat from './components/SearchChat';\nimport NaverMap from './components/NaverMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [searchResult, setSearchResult] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const handleSearch = async query => {\n    try {\n      // 검색어를 메시지 목록에 추가\n      setMessages(prev => [...prev, {\n        type: 'user',\n        text: query\n      }]);\n\n      // 백엔드에 검색 요청\n      const response = await fetch(`http://localhost:5000/api/search?query=${encodeURIComponent(query)}`);\n      const data = await response.json();\n      if (data.addresses && data.addresses.length > 0) {\n        const result = data.addresses[0];\n        setSearchResult({\n          x: parseFloat(result.x),\n          y: parseFloat(result.y),\n          address: result.roadAddress || result.jibunAddress,\n          query: query\n        });\n\n        // 검색 결과를 메시지로 추가\n        setMessages(prev => [...prev, {\n          type: 'system',\n          text: `'${query}'에 대한 검색 결과: ${result.roadAddress || result.jibunAddress}`\n        }]);\n      } else {\n        // 검색 결과가 없는 경우\n        setMessages(prev => [...prev, {\n          type: 'system',\n          text: `'${query}'에 대한 검색 결과가 없습니다.`\n        }]);\n      }\n    } catch (error) {\n      console.error('Error searching:', error);\n      setMessages(prev => [...prev, {\n        type: 'system',\n        text: `검색 중 오류가 발생했습니다: ${error.message}`\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(NaverMap, {\n          searchResult: searchResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: /*#__PURE__*/_jsxDEV(SearchChat, {\n          onSearch: handleSearch,\n          messages: messages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AFUBd4a5A1GTgwGDlvOL8WjzwRg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SearchChat","NaverMap","jsxDEV","_jsxDEV","App","_s","searchResult","setSearchResult","messages","setMessages","handleSearch","query","prev","type","text","response","fetch","encodeURIComponent","data","json","addresses","length","result","x","parseFloat","y","address","roadAddress","jibunAddress","error","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","_c","$RefreshReg$"],"sources":["C:/python/venv/naver-map-chat/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport SearchChat from './components/SearchChat';\r\nimport NaverMap from './components/NaverMap';\r\n\r\nfunction App() {\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const handleSearch = async (query) => {\r\n    try {\r\n      // 검색어를 메시지 목록에 추가\r\n      setMessages(prev => [...prev, { type: 'user', text: query }]);\r\n\r\n      // 백엔드에 검색 요청\r\n      const response = await fetch(`http://localhost:5000/api/search?query=${encodeURIComponent(query)}`);\r\n      const data = await response.json();\r\n      \r\n      if (data.addresses && data.addresses.length > 0) {\r\n        const result = data.addresses[0];\r\n        setSearchResult({\r\n          x: parseFloat(result.x),\r\n          y: parseFloat(result.y),\r\n          address: result.roadAddress || result.jibunAddress,\r\n          query: query\r\n        });\r\n        \r\n        // 검색 결과를 메시지로 추가\r\n        setMessages(prev => [...prev, { \r\n          type: 'system', \r\n          text: `'${query}'에 대한 검색 결과: ${result.roadAddress || result.jibunAddress}` \r\n        }]);\r\n      } else {\r\n        // 검색 결과가 없는 경우\r\n        setMessages(prev => [...prev, { \r\n          type: 'system', \r\n          text: `'${query}'에 대한 검색 결과가 없습니다.` \r\n        }]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error searching:', error);\r\n      setMessages(prev => [...prev, { \r\n        type: 'system', \r\n        text: `검색 중 오류가 발생했습니다: ${error.message}` \r\n      }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app-container\">\r\n        <div className=\"map-container\">\r\n          <NaverMap searchResult={searchResult} />\r\n        </div>\r\n        <div className=\"chat-container\">\r\n          <SearchChat onSearch={handleSearch} messages={messages} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}